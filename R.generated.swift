//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.clr` struct is generated, and contains static references to 2 color palettes.
  /// NOTE: R.clr is deprecated and will be removed in a future R.swift version.
  struct clr {
    /// This `R.clr.appleHIG` struct is generated, and contains static references to 8 colors.
    struct appleHIG {
      /// <span style='background-color: #007AFF; color: #FF8500; padding: 1px 3px;'>#007AFF</span> Blue
      static let blue = Rswift.ColorPaletteItemResource(name: "Blue", red: 0.0, green: 0.4784313725, blue: 1.0, alpha: 1.0)
      /// <span style='background-color: #4CD964; color: #B3269B; padding: 1px 3px;'>#4CD964</span> Green
      static let green = Rswift.ColorPaletteItemResource(name: "Green", red: 0.2980392157, green: 0.8509803922, blue: 0.3921568627, alpha: 1.0)
      /// <span style='background-color: #5856D6; color: #A7A929; padding: 1px 3px;'>#5856D6</span> Purple
      static let purple = Rswift.ColorPaletteItemResource(name: "Purple", red: 0.3450980392, green: 0.337254902, blue: 0.8392156863, alpha: 1.0)
      /// <span style='background-color: #5AC8FA; color: #A53705; padding: 1px 3px;'>#5AC8FA</span> Teal
      static let teal = Rswift.ColorPaletteItemResource(name: "Teal", red: 0.3529411765, green: 0.7843137255, blue: 0.9803921569, alpha: 1.0)
      /// <span style='background-color: #FF2D55; color: #00D2AA; padding: 1px 3px;'>#FF2D55</span> Pink
      static let pink = Rswift.ColorPaletteItemResource(name: "Pink", red: 1.0, green: 0.1764705882, blue: 0.3333333333, alpha: 1.0)
      /// <span style='background-color: #FF3B30; color: #00C4CF; padding: 1px 3px;'>#FF3B30</span> Red
      static let red = Rswift.ColorPaletteItemResource(name: "Red", red: 1.0, green: 0.231372549, blue: 0.1882352941, alpha: 1.0)
      /// <span style='background-color: #FF9500; color: #006AFF; padding: 1px 3px;'>#FF9500</span> Orange
      static let orange = Rswift.ColorPaletteItemResource(name: "Orange", red: 1.0, green: 0.5843137255, blue: 0.0, alpha: 1.0)
      /// <span style='background-color: #FFCC00; color: #0033FF; padding: 1px 3px;'>#FFCC00</span> Yellow
      static let yellow = Rswift.ColorPaletteItemResource(name: "Yellow", red: 1.0, green: 0.8, blue: 0.0, alpha: 1.0)
      
      /// <span style='background-color: #007AFF; color: #FF8500; padding: 1px 3px;'>#007AFF</span> Blue
      /// 
      /// UIColor(red: 0.0, green: 0.4784313725, blue: 1.0, alpha: 1.0)
      static func blue(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.0, green: 0.4784313725, blue: 1.0, alpha: 1.0)
      }
      
      /// <span style='background-color: #4CD964; color: #B3269B; padding: 1px 3px;'>#4CD964</span> Green
      /// 
      /// UIColor(red: 0.2980392157, green: 0.8509803922, blue: 0.3921568627, alpha: 1.0)
      static func green(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.2980392157, green: 0.8509803922, blue: 0.3921568627, alpha: 1.0)
      }
      
      /// <span style='background-color: #5856D6; color: #A7A929; padding: 1px 3px;'>#5856D6</span> Purple
      /// 
      /// UIColor(red: 0.3450980392, green: 0.337254902, blue: 0.8392156863, alpha: 1.0)
      static func purple(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.3450980392, green: 0.337254902, blue: 0.8392156863, alpha: 1.0)
      }
      
      /// <span style='background-color: #5AC8FA; color: #A53705; padding: 1px 3px;'>#5AC8FA</span> Teal
      /// 
      /// UIColor(red: 0.3529411765, green: 0.7843137255, blue: 0.9803921569, alpha: 1.0)
      static func teal(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.3529411765, green: 0.7843137255, blue: 0.9803921569, alpha: 1.0)
      }
      
      /// <span style='background-color: #FF2D55; color: #00D2AA; padding: 1px 3px;'>#FF2D55</span> Pink
      /// 
      /// UIColor(red: 1.0, green: 0.1764705882, blue: 0.3333333333, alpha: 1.0)
      static func pink(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 0.1764705882, blue: 0.3333333333, alpha: 1.0)
      }
      
      /// <span style='background-color: #FF3B30; color: #00C4CF; padding: 1px 3px;'>#FF3B30</span> Red
      /// 
      /// UIColor(red: 1.0, green: 0.231372549, blue: 0.1882352941, alpha: 1.0)
      static func red(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 0.231372549, blue: 0.1882352941, alpha: 1.0)
      }
      
      /// <span style='background-color: #FF9500; color: #006AFF; padding: 1px 3px;'>#FF9500</span> Orange
      /// 
      /// UIColor(red: 1.0, green: 0.5843137255, blue: 0.0, alpha: 1.0)
      static func orange(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 0.5843137255, blue: 0.0, alpha: 1.0)
      }
      
      /// <span style='background-color: #FFCC00; color: #0033FF; padding: 1px 3px;'>#FFCC00</span> Yellow
      /// 
      /// UIColor(red: 1.0, green: 0.8, blue: 0.0, alpha: 1.0)
      static func yellow(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 0.8, blue: 0.0, alpha: 1.0)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.clr.podoColors` struct is generated, and contains static references to 7 colors.
    struct podoColors {
      /// <span style='background-color: #33CCFF; color: #CC3300; padding: 1px 3px;'>#33CCFF</span> blue
      static let blue = Rswift.ColorPaletteItemResource(name: "blue", red: 0.2, green: 0.8, blue: 1.0, alpha: 1.0)
      /// <span style='background-color: #42D551; color: #BD2AAE; padding: 1px 3px;'>#42D551</span> IB-green
      static let ibGreen = Rswift.ColorPaletteItemResource(name: "IB-green", red: 0.2588235294, green: 0.8352941176, blue: 0.3176470588, alpha: 1.0)
      /// <span style='background-color: #4CD964; color: #B3269B; padding: 1px 3px;'>#4CD964</span> green
      static let green = Rswift.ColorPaletteItemResource(name: "green", red: 0.2980392157, green: 0.8509803922, blue: 0.3921568627, alpha: 1.0)
      /// <span style='background-color: #919191; color: #6E6E6E; padding: 1px 3px;'>#919191</span> empty
      static let empty = Rswift.ColorPaletteItemResource(name: "empty", red: 0.568627451, green: 0.568627451, blue: 0.568627451, alpha: 1.0)
      /// <span style='background-color: #F1F2ED; color: #0E0D12; padding: 1px 3px;'>#F1F2ED</span> background
      static let background = Rswift.ColorPaletteItemResource(name: "background", red: 0.9450980392, green: 0.9490196078, blue: 0.9294117647, alpha: 1.0)
      /// <span style='background-color: #FF9500; color: #006AFF; padding: 1px 3px;'>#FF9500</span> orange
      static let orange = Rswift.ColorPaletteItemResource(name: "orange", red: 1.0, green: 0.5843137255, blue: 0.0, alpha: 1.0)
      /// <span style='background-color: #FFFFFF; color: #000000; padding: 1px 3px;'>#FFFFFF</span> white
      static let white = Rswift.ColorPaletteItemResource(name: "white", red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
      
      /// <span style='background-color: #33CCFF; color: #CC3300; padding: 1px 3px;'>#33CCFF</span> blue
      /// 
      /// UIColor(red: 0.2, green: 0.8, blue: 1.0, alpha: 1.0)
      static func blue(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.2, green: 0.8, blue: 1.0, alpha: 1.0)
      }
      
      /// <span style='background-color: #42D551; color: #BD2AAE; padding: 1px 3px;'>#42D551</span> IB-green
      /// 
      /// UIColor(red: 0.2588235294, green: 0.8352941176, blue: 0.3176470588, alpha: 1.0)
      static func ibGreen(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.2588235294, green: 0.8352941176, blue: 0.3176470588, alpha: 1.0)
      }
      
      /// <span style='background-color: #4CD964; color: #B3269B; padding: 1px 3px;'>#4CD964</span> green
      /// 
      /// UIColor(red: 0.2980392157, green: 0.8509803922, blue: 0.3921568627, alpha: 1.0)
      static func green(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.2980392157, green: 0.8509803922, blue: 0.3921568627, alpha: 1.0)
      }
      
      /// <span style='background-color: #919191; color: #6E6E6E; padding: 1px 3px;'>#919191</span> empty
      /// 
      /// UIColor(red: 0.568627451, green: 0.568627451, blue: 0.568627451, alpha: 1.0)
      static func empty(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.568627451, green: 0.568627451, blue: 0.568627451, alpha: 1.0)
      }
      
      /// <span style='background-color: #F1F2ED; color: #0E0D12; padding: 1px 3px;'>#F1F2ED</span> background
      /// 
      /// UIColor(red: 0.9450980392, green: 0.9490196078, blue: 0.9294117647, alpha: 1.0)
      static func background(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.9450980392, green: 0.9490196078, blue: 0.9294117647, alpha: 1.0)
      }
      
      /// <span style='background-color: #FF9500; color: #006AFF; padding: 1px 3px;'>#FF9500</span> orange
      /// 
      /// UIColor(red: 1.0, green: 0.5843137255, blue: 0.0, alpha: 1.0)
      static func orange(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 0.5843137255, blue: 0.0, alpha: 1.0)
      }
      
      /// <span style='background-color: #FFFFFF; color: #000000; padding: 1px 3px;'>#FFFFFF</span> white
      /// 
      /// UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
      static func white(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Apple HIG.clr`.
    static let appleHIGClr = Rswift.FileResource(bundle: R.hostingBundle, name: "Apple HIG", pathExtension: "clr")
    /// Resource file `PodoColors.clr`.
    static let podoColorsClr = Rswift.FileResource(bundle: R.hostingBundle, name: "PodoColors", pathExtension: "clr")
    /// Resource file `paymentMethods.realm`.
    static let paymentMethodsRealm = Rswift.FileResource(bundle: R.hostingBundle, name: "paymentMethods", pathExtension: "realm")
    /// Resource file `sideMenuItems.realm`.
    static let sideMenuItemsRealm = Rswift.FileResource(bundle: R.hostingBundle, name: "sideMenuItems", pathExtension: "realm")
    
    /// `bundle.url(forResource: "Apple HIG", withExtension: "clr")`
    static func appleHIGClr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appleHIGClr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "PodoColors", withExtension: "clr")`
    static func podoColorsClr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podoColorsClr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "paymentMethods", withExtension: "realm")`
    static func paymentMethodsRealm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.paymentMethodsRealm
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "sideMenuItems", withExtension: "realm")`
    static func sideMenuItemsRealm(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sideMenuItemsRealm
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `AddNewCardIcon`.
    static let addNewCardIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AddNewCardIcon")
    /// Image `MetroTrainIcon`.
    static let metroTrainIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MetroTrainIcon")
    /// Image `QuickActionSettings`.
    static let quickActionSettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "QuickActionSettings")
    /// Image `SideMenuIcon`.
    static let sideMenuIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SideMenuIcon")
    /// Image `TransportCardIcon`.
    static let transportCardIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransportCardIcon")
    /// Image `crying-card`.
    static let cryingCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "crying-card")
    /// Image `scan-card`.
    static let scanCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "scan-card")
    
    /// `UIImage(named: "AddNewCardIcon", bundle: ..., traitCollection: ...)`
    static func addNewCardIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addNewCardIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MetroTrainIcon", bundle: ..., traitCollection: ...)`
    static func metroTrainIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.metroTrainIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QuickActionSettings", bundle: ..., traitCollection: ...)`
    static func quickActionSettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quickActionSettings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SideMenuIcon", bundle: ..., traitCollection: ...)`
    static func sideMenuIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sideMenuIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TransportCardIcon", bundle: ..., traitCollection: ...)`
    static func transportCardIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transportCardIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "crying-card", bundle: ..., traitCollection: ...)`
    static func cryingCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cryingCard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "scan-card", bundle: ..., traitCollection: ...)`
    static func scanCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanCard, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `AddNewCardCollectionViewCell`.
    static let addNewCardCollectionViewCell = _R.nib._AddNewCardCollectionViewCell()
    /// Nib `AmountFieldCell`.
    static let amountFieldCell = _R.nib._AmountFieldCell()
    /// Nib `CardsCollectionViewCell`.
    static let cardsCollectionViewCell = _R.nib._CardsCollectionViewCell()
    /// Nib `MainMenuTableViewCell`.
    static let mainMenuTableViewCell = _R.nib._MainMenuTableViewCell()
    /// Nib `PaymentCardCell`.
    static let paymentCardCell = _R.nib._PaymentCardCell()
    /// Nib `PaymentMethodCell`.
    static let paymentMethodCell = _R.nib._PaymentMethodCell()
    /// Nib `SideMenuTableViewCell`.
    static let sideMenuTableViewCell = _R.nib._SideMenuTableViewCell()
    /// Nib `TransportCardCell`.
    static let transportCardCell = _R.nib._TransportCardCell()
    
    /// `UINib(name: "AddNewCardCollectionViewCell", in: bundle)`
    static func addNewCardCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addNewCardCollectionViewCell)
    }
    
    /// `UINib(name: "AmountFieldCell", in: bundle)`
    static func amountFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amountFieldCell)
    }
    
    /// `UINib(name: "CardsCollectionViewCell", in: bundle)`
    static func cardsCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cardsCollectionViewCell)
    }
    
    /// `UINib(name: "MainMenuTableViewCell", in: bundle)`
    static func mainMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainMenuTableViewCell)
    }
    
    /// `UINib(name: "PaymentCardCell", in: bundle)`
    static func paymentCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentCardCell)
    }
    
    /// `UINib(name: "PaymentMethodCell", in: bundle)`
    static func paymentMethodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentMethodCell)
    }
    
    /// `UINib(name: "SideMenuTableViewCell", in: bundle)`
    static func sideMenuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sideMenuTableViewCell)
    }
    
    /// `UINib(name: "TransportCardCell", in: bundle)`
    static func transportCardCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transportCardCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 8 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddNewCardCollectionViewCell`.
    static let addNewCardCollectionViewCell: Rswift.ReuseIdentifier<AddNewCardCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "AddNewCardCollectionViewCell")
    /// Reuse identifier `AmountFieldCell`.
    static let amountFieldCell: Rswift.ReuseIdentifier<AmountFieldCell> = Rswift.ReuseIdentifier(identifier: "AmountFieldCell")
    /// Reuse identifier `CardsCollectionViewCell`.
    static let cardsCollectionViewCell: Rswift.ReuseIdentifier<CardsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CardsCollectionViewCell")
    /// Reuse identifier `MainMenuTableViewCell`.
    static let mainMenuTableViewCell: Rswift.ReuseIdentifier<MainMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "MainMenuTableViewCell")
    /// Reuse identifier `PaymentCardCell`.
    static let paymentCardCell: Rswift.ReuseIdentifier<PaymentCardCell> = Rswift.ReuseIdentifier(identifier: "PaymentCardCell")
    /// Reuse identifier `PaymentMethodCell`.
    static let paymentMethodCell: Rswift.ReuseIdentifier<PaymentMethodCell> = Rswift.ReuseIdentifier(identifier: "PaymentMethodCell")
    /// Reuse identifier `SideMenuTableViewCell`.
    static let sideMenuTableViewCell: Rswift.ReuseIdentifier<SideMenuTableViewCell> = Rswift.ReuseIdentifier(identifier: "SideMenuTableViewCell")
    /// Reuse identifier `TransportCardCell`.
    static let transportCardCell: Rswift.ReuseIdentifier<TransportCardCell> = Rswift.ReuseIdentifier(identifier: "TransportCardCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `AddNewCardViewController`.
    static let addNewCardViewController = _R.storyboard.addNewCardViewController()
    /// Storyboard `CardsViewController`.
    static let cardsViewController = _R.storyboard.cardsViewController()
    /// Storyboard `ContactsViewController`.
    static let contactsViewController = _R.storyboard.contactsViewController()
    /// Storyboard `HelpViewController`.
    static let helpViewController = _R.storyboard.helpViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainMenuViewController`.
    static let mainMenuViewController = _R.storyboard.mainMenuViewController()
    /// Storyboard `RootViewController`.
    static let rootViewController = _R.storyboard.rootViewController()
    /// Storyboard `SettingsViewController`.
    static let settingsViewController = _R.storyboard.settingsViewController()
    /// Storyboard `TopUpViewController`.
    static let topUpViewController = _R.storyboard.topUpViewController()
    /// Storyboard `TutorialViewController`.
    static let tutorialViewController = _R.storyboard.tutorialViewController()
    
    /// `UIStoryboard(name: "AddNewCardViewController", bundle: ...)`
    static func addNewCardViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addNewCardViewController)
    }
    
    /// `UIStoryboard(name: "CardsViewController", bundle: ...)`
    static func cardsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cardsViewController)
    }
    
    /// `UIStoryboard(name: "ContactsViewController", bundle: ...)`
    static func contactsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.contactsViewController)
    }
    
    /// `UIStoryboard(name: "HelpViewController", bundle: ...)`
    static func helpViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.helpViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainMenuViewController", bundle: ...)`
    static func mainMenuViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainMenuViewController)
    }
    
    /// `UIStoryboard(name: "RootViewController", bundle: ...)`
    static func rootViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.rootViewController)
    }
    
    /// `UIStoryboard(name: "SettingsViewController", bundle: ...)`
    static func settingsViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingsViewController)
    }
    
    /// `UIStoryboard(name: "TopUpViewController", bundle: ...)`
    static func topUpViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.topUpViewController)
    }
    
    /// `UIStoryboard(name: "TutorialViewController", bundle: ...)`
    static func tutorialViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tutorialViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 12 localization tables.
  struct string {
    /// This `R.string.addNewCardViewController` struct is generated, and contains static references to 1 localization keys.
    struct addNewCardViewController {
      /// ru translation: Введите номер карты
      /// 
      /// Locales: ru
      static let xMwMhFZGPlaceholder = Rswift.StringResource(key: "XMw-mh-FZG.placeholder", tableName: "AddNewCardViewController", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Введите номер карты
      /// 
      /// Locales: ru
      static func xMwMhFZGPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("XMw-mh-FZG.placeholder", tableName: "AddNewCardViewController", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.cardsViewController` struct is generated, and contains static references to 0 localization keys.
    struct cardsViewController {
      fileprivate init() {}
    }
    
    /// This `R.string.contactsViewController` struct is generated, and contains static references to 1 localization keys.
    struct contactsViewController {
      /// ru translation: ContactsViewController
      /// 
      /// Locales: ru
      static let f2Xg0abText = Rswift.StringResource(key: "0F2-xg-0ab.text", tableName: "ContactsViewController", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: ContactsViewController
      /// 
      /// Locales: ru
      static func f2Xg0abText(_: Void = ()) -> String {
        return NSLocalizedString("0F2-xg-0ab.text", tableName: "ContactsViewController", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.helpViewController` struct is generated, and contains static references to 1 localization keys.
    struct helpViewController {
      /// ru translation: HelpViewController
      /// 
      /// Locales: ru
      static let y4LD9RnRText = Rswift.StringResource(key: "y4L-d9-rnR.text", tableName: "HelpViewController", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: HelpViewController
      /// 
      /// Locales: ru
      static func y4LD9RnRText(_: Void = ()) -> String {
        return NSLocalizedString("y4L-d9-rnR.text", tableName: "HelpViewController", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.infoPlist` struct is generated, and contains static references to 4 localization keys.
    struct infoPlist {
      /// Base translation: Add new transport card
      /// 
      /// Locales: ru, Base
      static let add_TRANSPORT_CARD_SHORTCUT_TITLE = Rswift.StringResource(key: "ADD_TRANSPORT_CARD_SHORTCUT_TITLE", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Copyright © 2018 Andrey Fedorov. All rights reserved.
      /// 
      /// Locales: ru, Base
      static let nsHumanReadableCopyright = Rswift.StringResource(key: "NSHumanReadableCopyright", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Podorozhnik
      /// 
      /// Locales: ru, Base
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      /// Base translation: Settings
      /// 
      /// Locales: ru, Base
      static let settings_SHORTCUT_TITLE = Rswift.StringResource(key: "SETTINGS_SHORTCUT_TITLE", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ru", "Base"], comment: nil)
      
      /// Base translation: Add new transport card
      /// 
      /// Locales: ru, Base
      static func add_TRANSPORT_CARD_SHORTCUT_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("ADD_TRANSPORT_CARD_SHORTCUT_TITLE", tableName: "InfoPlist", bundle: R.hostingBundle, value: "Add new transport card", comment: "")
      }
      
      /// Base translation: Copyright © 2018 Andrey Fedorov. All rights reserved.
      /// 
      /// Locales: ru, Base
      static func nsHumanReadableCopyright(_: Void = ()) -> String {
        return NSLocalizedString("NSHumanReadableCopyright", tableName: "InfoPlist", bundle: R.hostingBundle, value: "Copyright © 2018 Andrey Fedorov. All rights reserved.", comment: "")
      }
      
      /// Base translation: Podorozhnik
      /// 
      /// Locales: ru, Base
      static func cfBundleDisplayName(_: Void = ()) -> String {
        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, value: "Podorozhnik", comment: "")
      }
      
      /// Base translation: Settings
      /// 
      /// Locales: ru, Base
      static func settings_SHORTCUT_TITLE(_: Void = ()) -> String {
        return NSLocalizedString("SETTINGS_SHORTCUT_TITLE", tableName: "InfoPlist", bundle: R.hostingBundle, value: "Settings", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 2 localization keys.
    struct launchScreen {
      /// ru translation: Copyright © 2018 Андрей Федоров. Все права защищены.
      /// 
      /// Locales: ru
      static let obGY5KRdText = Rswift.StringResource(key: "obG-Y5-kRd.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Podo
      /// 
      /// Locales: ru
      static let gJdYhRWbText = Rswift.StringResource(key: "GJd-Yh-RWb.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Copyright © 2018 Андрей Федоров. Все права защищены.
      /// 
      /// Locales: ru
      static func obGY5KRdText(_: Void = ()) -> String {
        return NSLocalizedString("obG-Y5-kRd.text", tableName: "LaunchScreen", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Podo
      /// 
      /// Locales: ru
      static func gJdYhRWbText(_: Void = ()) -> String {
        return NSLocalizedString("GJd-Yh-RWb.text", tableName: "LaunchScreen", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 12 localization keys.
    struct localizable {
      /// Base translation: Add your first transport card and start using the app
      /// 
      /// Locales: Base, ru
      static let addCard = Rswift.StringResource(key: "add card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Apple Pay
      /// 
      /// Locales: Base, ru
      static let applePay = Rswift.StringResource(key: "applePay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Cellphone balance
      /// 
      /// Locales: Base, ru
      static let cellphoneBalance = Rswift.StringResource(key: "cellphoneBalance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Contacts
      /// 
      /// Locales: Base, ru
      static let contacts = Rswift.StringResource(key: "contacts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Credit/Debit Card
      /// 
      /// Locales: Base, ru
      static let bankCard = Rswift.StringResource(key: "bankCard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Help
      /// 
      /// Locales: Base, ru
      static let help = Rswift.StringResource(key: "help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Main screen
      /// 
      /// Locales: Base, ru
      static let main = Rswift.StringResource(key: "main", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: No recent transaction
      /// 
      /// Locales: Base, ru
      static let noTransaction = Rswift.StringResource(key: "no transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: QIWI Wallet
      /// 
      /// Locales: Base, ru
      static let qiwiWallet = Rswift.StringResource(key: "qiwiWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Select payment method:
      /// 
      /// Locales: Base, ru
      static let paymentSelectionTitle = Rswift.StringResource(key: "payment-selection-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Settings
      /// 
      /// Locales: Base, ru
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      /// Base translation: Yandex.Money
      /// 
      /// Locales: Base, ru
      static let yandexMoney = Rswift.StringResource(key: "yandexMoney", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      
      /// Base translation: Add your first transport card and start using the app
      /// 
      /// Locales: Base, ru
      static func addCard(_: Void = ()) -> String {
        return NSLocalizedString("add card", bundle: R.hostingBundle, value: "Add your first transport card and start using the app", comment: "")
      }
      
      /// Base translation: Apple Pay
      /// 
      /// Locales: Base, ru
      static func applePay(_: Void = ()) -> String {
        return NSLocalizedString("applePay", bundle: R.hostingBundle, value: "Apple Pay", comment: "")
      }
      
      /// Base translation: Cellphone balance
      /// 
      /// Locales: Base, ru
      static func cellphoneBalance(_: Void = ()) -> String {
        return NSLocalizedString("cellphoneBalance", bundle: R.hostingBundle, value: "Cellphone balance", comment: "")
      }
      
      /// Base translation: Contacts
      /// 
      /// Locales: Base, ru
      static func contacts(_: Void = ()) -> String {
        return NSLocalizedString("contacts", bundle: R.hostingBundle, value: "Contacts", comment: "")
      }
      
      /// Base translation: Credit/Debit Card
      /// 
      /// Locales: Base, ru
      static func bankCard(_: Void = ()) -> String {
        return NSLocalizedString("bankCard", bundle: R.hostingBundle, value: "Credit/Debit Card", comment: "")
      }
      
      /// Base translation: Help
      /// 
      /// Locales: Base, ru
      static func help(_: Void = ()) -> String {
        return NSLocalizedString("help", bundle: R.hostingBundle, value: "Help", comment: "")
      }
      
      /// Base translation: Main screen
      /// 
      /// Locales: Base, ru
      static func main(_: Void = ()) -> String {
        return NSLocalizedString("main", bundle: R.hostingBundle, value: "Main screen", comment: "")
      }
      
      /// Base translation: No recent transaction
      /// 
      /// Locales: Base, ru
      static func noTransaction(_: Void = ()) -> String {
        return NSLocalizedString("no transaction", bundle: R.hostingBundle, value: "No recent transaction", comment: "")
      }
      
      /// Base translation: QIWI Wallet
      /// 
      /// Locales: Base, ru
      static func qiwiWallet(_: Void = ()) -> String {
        return NSLocalizedString("qiwiWallet", bundle: R.hostingBundle, value: "QIWI Wallet", comment: "")
      }
      
      /// Base translation: Select payment method:
      /// 
      /// Locales: Base, ru
      static func paymentSelectionTitle(_: Void = ()) -> String {
        return NSLocalizedString("payment-selection-title", bundle: R.hostingBundle, value: "Select payment method:", comment: "")
      }
      
      /// Base translation: Settings
      /// 
      /// Locales: Base, ru
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("settings", bundle: R.hostingBundle, value: "Settings", comment: "")
      }
      
      /// Base translation: Yandex.Money
      /// 
      /// Locales: Base, ru
      static func yandexMoney(_: Void = ()) -> String {
        return NSLocalizedString("yandexMoney", bundle: R.hostingBundle, value: "Yandex.Money", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.mainMenuViewController` struct is generated, and contains static references to 0 localization keys.
    struct mainMenuViewController {
      fileprivate init() {}
    }
    
    /// This `R.string.rootViewController` struct is generated, and contains static references to 0 localization keys.
    struct rootViewController {
      fileprivate init() {}
    }
    
    /// This `R.string.settingsViewController` struct is generated, and contains static references to 1 localization keys.
    struct settingsViewController {
      /// ru translation: SettingsViewController
      /// 
      /// Locales: ru
      static let fxad11NVText = Rswift.StringResource(key: "FXA-d1-1NV.text", tableName: "SettingsViewController", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: SettingsViewController
      /// 
      /// Locales: ru
      static func fxad11NVText(_: Void = ()) -> String {
        return NSLocalizedString("FXA-d1-1NV.text", tableName: "SettingsViewController", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.topUpViewController` struct is generated, and contains static references to 0 localization keys.
    struct topUpViewController {
      fileprivate init() {}
    }
    
    /// This `R.string.tutorialViewController` struct is generated, and contains static references to 3 localization keys.
    struct tutorialViewController {
      /// ru translation: Next
      /// 
      /// Locales: ru
      static let u0HjXWjNormalTitle = Rswift.StringResource(key: "0U0-hj-xWj.normalTitle", tableName: "TutorialViewController", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Skip
      /// 
      /// Locales: ru
      static let ej50XCyoNormalTitle = Rswift.StringResource(key: "Ej5-0X-Cyo.normalTitle", tableName: "TutorialViewController", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: TutorialViewController
      /// 
      /// Locales: ru
      static let iEnFaQtUText = Rswift.StringResource(key: "IEn-fa-qtU.text", tableName: "TutorialViewController", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Next
      /// 
      /// Locales: ru
      static func u0HjXWjNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("0U0-hj-xWj.normalTitle", tableName: "TutorialViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Skip
      /// 
      /// Locales: ru
      static func ej50XCyoNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Ej5-0X-Cyo.normalTitle", tableName: "TutorialViewController", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: TutorialViewController
      /// 
      /// Locales: ru
      static func iEnFaQtUText(_: Void = ()) -> String {
        return NSLocalizedString("IEn-fa-qtU.text", tableName: "TutorialViewController", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddNewCardCollectionViewCell.validate()
      try _CardsCollectionViewCell.validate()
    }
    
    struct _AddNewCardCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddNewCardCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "AddNewCardCollectionViewCell"
      let name = "AddNewCardCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddNewCardCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddNewCardCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "AddNewCardIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AddNewCardIcon' is used in nib 'AddNewCardCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AmountFieldCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AmountFieldCell
      
      let bundle = R.hostingBundle
      let identifier = "AmountFieldCell"
      let name = "AmountFieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AmountFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmountFieldCell
      }
      
      fileprivate init() {}
    }
    
    struct _CardsCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CardsCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CardsCollectionViewCell"
      let name = "CardsCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CardsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CardsCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "TransportCardIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TransportCardIcon' is used in nib 'CardsCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MainMenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MainMenuTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MainMenuTableViewCell"
      let name = "MainMenuTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MainMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MainMenuTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentCardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PaymentCardCell
      
      let bundle = R.hostingBundle
      let identifier = "PaymentCardCell"
      let name = "PaymentCardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PaymentCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentCardCell
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentMethodCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PaymentMethodCell
      
      let bundle = R.hostingBundle
      let identifier = "PaymentMethodCell"
      let name = "PaymentMethodCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PaymentMethodCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentMethodCell
      }
      
      fileprivate init() {}
    }
    
    struct _SideMenuTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SideMenuTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SideMenuTableViewCell"
      let name = "SideMenuTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SideMenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SideMenuTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransportCardCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TransportCardCell
      
      let bundle = R.hostingBundle
      let identifier = "TransportCardCell"
      let name = "TransportCardCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TransportCardCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransportCardCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try topUpViewController.validate()
    }
    
    struct addNewCardViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = AddNewCardViewController
      
      let bundle = R.hostingBundle
      let name = "AddNewCardViewController"
      
      fileprivate init() {}
    }
    
    struct cardsViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = CardsViewController
      
      let bundle = R.hostingBundle
      let name = "CardsViewController"
      
      fileprivate init() {}
    }
    
    struct contactsViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ContactsViewController
      
      let bundle = R.hostingBundle
      let name = "ContactsViewController"
      
      fileprivate init() {}
    }
    
    struct helpViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = HelpViewController
      
      let bundle = R.hostingBundle
      let name = "HelpViewController"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct mainMenuViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MainMenuViewController
      
      let bundle = R.hostingBundle
      let name = "MainMenuViewController"
      
      fileprivate init() {}
    }
    
    struct rootViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "RootViewController"
      
      fileprivate init() {}
    }
    
    struct settingsViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SettingsViewController
      
      let bundle = R.hostingBundle
      let name = "SettingsViewController"
      
      fileprivate init() {}
    }
    
    struct topUpViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TopUpViewController
      
      let bundle = R.hostingBundle
      let name = "TopUpViewController"
      let paymentViewController = StoryboardViewControllerResource<PaymentViewController>(identifier: "PaymentViewController")
      
      func paymentViewController(_: Void = ()) -> PaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.topUpViewController().paymentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentViewController' could not be loaded from storyboard 'TopUpViewController' as 'PaymentViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tutorialViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = TutorialViewController
      
      let bundle = R.hostingBundle
      let name = "TutorialViewController"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
